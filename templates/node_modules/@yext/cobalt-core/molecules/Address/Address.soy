{namespace cobalt.molecules}

/**
 * @param profile
 * @param? derivedData
 *
 * Class passthroughs
 * @param baseClass
 * @param? subClass
 * @param? modifiers
 * @param? attributes
 *
 * Config params
 * @param? lines
 *
 * Meta params
 * @param? hideSchema
 * @param? itemRefId An ID to use when referencing an address from an itemref attribute
 */
{template .Address}
  {let $lines_default: [['line1'], ['city', 'region', 'postalCode'], ['countryCode']] /}

  {let $class}
    {call cobalt.helpers.class_builder data="all"}
      {param name: 'Address' /}
    {/call}
  {/let}
  {let $attribute}
    {call cobalt.helpers.attribute_builder data="all" /}
  {/let}

  <div
    class="{$class}"
    {if $attribute} {$attribute |noAutoescape}{/if}
  >
    {if not $hideSchema}
      {call .schema__Coordinates data="all" /}
    {/if}

    {let $schema}
      {if not $hideSchema}
        {if strlen($itemRefId ?: '')>0}
          {sp}id="{$itemRefId}"
        {/if}
        {sp}itemscope itemtype="http://schema.org/PostalAddress" itemprop="address"
      {/if}
    {/let}

    <address class="Address-content" {$schema |noAutoescape}>
      {foreach $line in $lines ?: $lines_default}
        {call .AddressLine data="all"}
          {param line: $line /}
        {/call}
      {/foreach}

      // Structured data meta fields
      {if not $hideSchema}
        {call .schema__Street data="all" /}
        {call .schema__Sublocality data="all" /}
      {/if}
    </address>
  </div>
{/template}

/**
 * @param line
 * @param profile
 * @param? derivedData // Passthrough
 * @param? hideSchema
 */
{template .AddressLine}
  <div class="Address-line">
    {foreach $field in $line}
      {switch $field}
        {case 'city'}
          {call .AddressCity data="all" /}
        {case 'country'}
          {call .AddressCountry data="all" /}
        {case 'countryCode'}
          {call .AddressCountry data="all"}
            {param abbr: true /}
          {/call}
        {case 'extraDescription'}
          {call .AddressExtraDescription data="all" /}
        {case 'line1'}
          {call .AddressLine1 data="all" /}
        {case 'line2'}
          {call .AddressLine2 data="all" /}
        {case 'line3'}
          {call .AddressLine3 data="all" /}
        {case 'postalCode'}
          {call .AddressPostalCode data="all" /}
        {case 'region'}
          {call .AddressRegion data="all" /}
        {case 'regionCode'}
          {call .AddressRegion data="all"}
            {param abbr: true /}
          {/call}
        {default}
      {/switch}
      // Convert field names to the slightly confusing platform names
      {let $trueFieldName:
        $field == 'regionCode' ? 'region' :
        $field == 'region' ? 'stateName' :
        $field
      /}
      // Check if field had data and not last before adding a comma
      {if not isLast($field) and ($profile.address[$trueFieldName] or $derivedData.address[$trueFieldName])}
        ,{sp}
      {/if}
    {/foreach}
  </div>
{/template}

// Visible address components
// ---

/**
 * @param profile
 */
{template .AddressCity}
  {if $profile.address?.city}
    <span class="Address-field Address-city">
      {$profile.address.city}
    </span>
  {/if}
{/template}

/**
 * @param profile
 * @param? derivedData
 *
 * @param? abbr
 * @param? hideSchema
 */
{template .AddressCountry}
  // Get full country name
  {let $country: $profile.address.countryCode /}
  {let $countryName: $derivedData?.address?.countryName ?: $country /}

  {if $country}
    {if $abbr == true}
      // Use abbreviated country name
      <abbr
        class="Address-field Address-country Address-country--code Address-country--{$country |casing:'lower'}"
        title="{$countryName}"
        {if not $hideSchema}itemprop="addressCountry"{/if}
      >
        {$country}
      </abbr>
    {else}
      // Use full country name
      <span
        class="Address-field Address-country Address-country--{$country |casing:'lower'}"
        {if not $hideSchema}itemprop="addressCountry"{/if}
      >
        {$countryName}
      </span>
    {/if}
  {/if}
{/template}

/**
 * @param profile
 */
{template .AddressExtraDescription}
  {if $profile.address?.extraDescription}
    <span class="Address-field Address-extraDescription">
      {$profile.address.extraDescription}
    </span>
  {/if}
{/template}

/**
 * @param profile
 */
{template .AddressLine1}
  {if $profile.address?.line1}
    <span class="Address-field Address-line1">
      {$profile.address.line1}
    </span>
  {/if}
{/template}

/**
 * @param profile
 */
{template .AddressLine2}
  {if $profile.address?.line2}
    <span class="Address-field Address-line2">
      {$profile.address.line2}
    </span>
  {/if}
{/template}

/**
 * @param profile
 */
{template .AddressLine3}
  {if $profile.address?.line3}
    <span class="Address-field Address-line3">
      {$profile.address.line3}
    </span>
  {/if}
{/template}

/**
 * @param profile
 * @param? hideSchema
 */
{template .AddressPostalCode}
  {if $profile.address?.postalCode}
    <span
      class="Address-field Address-postalCode"
      {if not $hideSchema} itemprop="postalCode"{/if}
    >
      {$profile.address.postalCode}
    </span>
  {/if}
{/template}

/**
 * @param profile
 * @param? derivedData
 *
 * @param? abbr
 * @param? hideSchema
 */
{template .AddressRegion}
  // Get full region name
  {let $region: $profile.address.region ?: '' /}
  {let $regionName: $derivedData?.address?.stateName ?: $region /}

  {if $region}
    {if $abbr == true}
      // Use abbreviated region name
      <abbr
        class="Address-field Address-region Address-region--code Address-region--{$region |casing:'lower'}"
        title="{$regionName}"
        {if not $hideSchema}itemprop="addressRegion"{/if}
      >
        {$region}
      </abbr>
    {else}
      // Use full region name
      <span
        class="Address-field Address-region Address-region--{$region |casing:'lower'}"
        {if not $hideSchema}itemprop="addressRegion"{/if}
      >
        {$regionName}
      </span>
    {/if}
  {/if}
{/template}

/**
 * Pulls geo schema tag info
 *
 * @param profile
 */
{template .schema__Coordinates}
  <span class="Address-coordinates" itemprop="geo" itemscope itemtype="http://schema.org/GeoCoordinates">
    <meta itemprop="latitude" content="{$profile.yextDisplayCoordinate.lat}">
    <meta itemprop="longitude" content="{$profile.yextDisplayCoordinate.long}">
  </span>
{/template}

/**
 * @param profile
 * @param? hideSchema
 */
{template .schema__Street}
  {let $address1: $profile.address.line1 /}
  {let $address2: $profile.address.line2 /}

  {if not $hideSchema}
    <meta itemprop="streetAddress" content="{$address1}{if $address2} {$address2}{/if}" />
  {/if}
{/template}


/**
 * @param profile
 */
{template .schema__Sublocality}
  {let $city: $profile.address?.city /}
  {let $sublocality: $profile.address?.sublocality /}
  {if $city and $sublocality}
    <meta itemprop="addressLocality" content="{$city} {$sublocality}" />
  {/if}
{/template}

