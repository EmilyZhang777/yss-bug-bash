{namespace cobalt.molecules}

/**
 * @param derivedData
 * @param profile
 *
 * Class passthroughs
 * @param baseClass
 * @param? subClass
 * @param? modifiers
 * @param? attributes
 *
 * Content params
 * @param? uber
 * @param? lyft
 * @param? icon
 * @param? customLink
 * @param? buttonText
 *
 * Config params
 * @param? inverted
 * @param? lyftRideType
 */
{template .Rideshare}
  {if $uber or $lyft}
    {let $rideshare: $uber ? 'uber' : 'lyft' /}

    {let $class}
      {call cobalt.helpers.class_builder data="all"}
        {param name: 'Rideshare' /}
        {param modifiers: augmentList($inverted ? [$rideshare, 'inverted'] : [$rideshare], $modifiers ? $modifiers : []) /}
      {/call}
    {/let}
    {let $attribute}
      {call cobalt.helpers.attribute_builder data="all" /}
    {/let}

    {let $href}
      {if $customLink}
        {$customLink}
      {else}
        {if $rideshare == 'uber' and $derivedData.uber?.url}
          {$derivedData.uber.url}
        {else}
          {call .rideshareUrl data="all"}
            {param rideshare: $rideshare /}
          {/call}
        {/if}
      {/if}
    {/let}

    <div
      class="{$class}"
      {if $attribute} {$attribute |noAutoescape}{/if}
    >
      {call cobalt.atoms.Link data="all"}
        {param baseClass: 'Rideshare' /}
        {param subClass: $rideshare /}
        {param styleAsButton: true /}
        {param href: $href /}
        {param content}
          {if $icon}
            // TODO get branding for rideshares
            {$icon |noAutoescape}
          {/if}
          {call cobalt.atoms.Text data="all"}
            {param baseClass: 'Rideshare' /}
            {param content}
              {if $buttonText}
                {$buttonText |noAutoescape}
              {else}
                {msg desc=""}
                  Get a Ride
                {/msg}
              {/if}
            {/param}
          {/call}
        {/param}
      {/call}
    </div>
  {/if}
{/template}

/**
 * @param profile
 * @param rideshare
 * @param? lyftRideType
 */
{template .rideshareUrl}
  {let $routableCoordExists: $profile.yextRoutableCoordinate?.lat and $profile.yextRoutableCoordinate?.long /}
  {let $lat}
    {if $routableCoordExists}
      {$profile.yextRoutableCoordinate.lat}
    {else}
      {$profile.yextDisplayCoordinate.lat}
    {/if}
  {/let}
  {let $long}
    {if $routableCoordExists}
      {$profile.yextRoutableCoordinate.long}
    {else}
      {$profile.yextDisplayCoordinate.long}
    {/if}
  {/let}
  {if $rideshare == 'uber'}
    https://m.uber.com/ul/?action=setPickup&pickup=my_location&dropoff[latitude]={$lat}&dropoff[longitude]={$long}
  {else}
    lyft://ridetype?id={$lyftRideType ? $lyftRideType : 'lyft'}&destination[latitude]={$lat}&destination[longitude]={$long}
  {/if}
{/template}
