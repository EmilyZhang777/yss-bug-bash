{namespace cobalt.molecules}

/**
 * Class passthroughs
 * @param baseClass
 * @param? subClass
 * @param? modifiers
 * @param? attributes
 *
 * Content Params
 * @param distance
 *
 * Config params
 * @param? unit
 * @param? label
 * @param? decimals
 * @param? decimalLimit
 */
{template .DistanceCalc}
  {let $class}
    {call cobalt.helpers.class_builder data="all"}
      {param name: 'DistanceCalc' /}
    {/call}
  {/let}
  {let $attribute}
    {call cobalt.helpers.attribute_builder data="all" /}
  {/let}

  {let $defaultDistance: $unit == 'km' ? $distance.distanceKilometers : $distance.distanceMiles /}
  {let $roundedDistance}
    {call .DistanceRounder data="all"}
      {param distance: $defaultDistance /}
      {param decimalLimit: $decimalLimit ?: 10 /}
    {/call}
  {/let}

  {if $distance.distanceMiles}
    <span
      class="{$class}"
      {if $attribute} {$attribute |noAutoescape}{/if}
    >
      {call cobalt.atoms.Text data="all"}
        {param baseClass: 'DistanceCalc' /}
        {param subClass: 'value' /}
        {param tag: 'span'/}
        {param content: $roundedDistance /}
      {/call}
      {call cobalt.atoms.Text data="all"}
        {param baseClass: 'Distance' /}
        {param subClass: 'unit' /}
        {param tag: 'span'/}
        {param content}
          {call .DistanceLabel data="all"}
            {param distance: $roundedDistance /}
          {/call}
        {/param}
      {/call}
    </span>
  {/if}
{/template}

/**
 * Round distance to specified decimal place
 * @param distance
 * @param decimals
 * @param decimalLimit
 */
{template .DistanceRounder}
  {let $wholeNumber: floor($distance) /}
  // Temporarily move over digits to round number, then move back
  {let $rounder}
    1{foreach $i in range($decimals)}0{/foreach}
  {/let}
  {let $decimal: round(($distance - $wholeNumber) * parseInt($rounder)) / parseInt($rounder) /}

  {if $distance < $decimalLimit}
    // Specify n decimals if within limit
    {$wholeNumber + $decimal}
  {else}
    // Round greater distances to whole number
    {round($distance)}
  {/if}
{/template}

/**
 * @param distance
 * @param? unit
 * @param? label
 */
{template .DistanceLabel}
  {let $defaultLabel: $label ?: 'abbr' /}
  {let $isSingular: $distance == 1 ? 1 : 0 /}

  {switch $unit}
    {case 'km'}
      {switch $defaultLabel}
        {case 'full'}
          {msg desc=""}
            {plural $isSingular}
              {case 1}
                kilometer
              {default}
                kilometers
            {/plural}
          {/msg}
        {case 'abbr'}
          km
        {case 'none'}
        {default}
          {$label ?: ''}
      {/switch}
    {default}
      {switch $defaultLabel}
        {case 'full'}
          {msg desc=""}
            {plural $isSingular}
              {case 1}
                mile
              {default}
                miles
            {/plural}
          {/msg}
        {case 'abbr'}
          mi
        {case 'none'}
        {default}
          {$label ?: ''}
      {/switch}
  {/switch}
{/template}
