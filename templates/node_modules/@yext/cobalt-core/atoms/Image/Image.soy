{namespace cobalt.atoms}

/**
 * Class passthroughs
 * @param baseClass
 * @param? subClass
 * @param? modifiers
 * @param? attributes
 *
 * Content params
 * @param image
 *
 * Config
 * @param? sizes array, for breakpoints sm, md, lg (accepts pixel value, percent viewport, 'full', 'half')
 * @param? defaultSize string, 'width' x 'height'
 * @param? loading eager, lazy
 * @param? objectFit fill, contain, cover, none
 * @param? objectPosition https://developer.mozilla.org/en-US/docs/Web/CSS/object-position
 *
 * Meta params
 * @param? itemprop
 */
{template .Image}
  {let $class}
    {call cobalt.helpers.class_builder data="all"}
      {param name: 'Image' /}
    {/call}
  {/let}
  {let $attribute}
    {call cobalt.helpers.attribute_builder data="all" /}
  {/let}

  // Check if image is from the platform
  {let $isProfile: $image.src ? false : true /}

  // Transform image into common data structure
  // + add source image as largest thumbnail
  {let $thumbnails:
    $isProfile
    ?
      augmentList(
        [[
          'url': $image.url,
          'width': $image.width,
          'height': $image.height
        ]],
        $image.thumbnails
      )
    :
      [[ 'url': $image.src ]]
  /}
  {let $lastThumbnail: length($thumbnails) - 1 /}

  // Clean up required attributes
  {let $src: $isProfile
    ? imageBySizeEntity($image, $defaultSize ?: '400x')
    : $thumbnails[$lastThumbnail].url
  /}
  {let $alt: $isProfile
    ? ($image.alternateText ?: '')
    : ($image.alt ?: '')
  /}

  {if $objectFit}
    <div
      data-object-fit="{$objectFit}"
      {if $objectPosition} data-object-position={$objectPosition}{/if}
    >
  {/if}
    <img
      class="{$class}"
      src="{$src}"
      alt="{$alt}"
      {if $isProfile}srcset="{call .Image__srcset data="['data': $thumbnails]" /}"{/if}
      {if $isProfile and $sizes}sizes="{call .Image__sizes data="['sizes': $sizes]" /}"{/if}
      {if $loading}loading="{$loading}"{/if}
      {if $attribute} {$attribute |noAutoescape}{/if}
      {if $itemprop} itemprop="{$itemprop}"{/if}
    >
  {if $objectFit}
    </div>
  {/if}
{/template}

/**
 * @param sizes
 */
{template .Image__sizes}
  // Use default application breakpoints
  {let $breakpoints: [1200, 992, 768] /}
  {foreach $i in range(length($breakpoints))}
    {let $bp: $breakpoints[$i] /}
    // Calculate amount of layout or viewport
    {let $size}
      {switch $sizes[$i]}
        {case 'full'}
          100vw
        {case 'half'}
          50vw
        {default}
          {if strContains($sizes[$i] + '', 'px')}
            {$sizes[$i]}
          {else}
            {$bp * ($sizes[$i] / 100 ?: 1)}px
          {/if}
      {/switch}
    {/let}

    (min-width: {$bp}px) {$size},

  {/foreach}
  {sp}100w
{/template}

/**
 * @param data
 */
{template .Image__srcset}
  {foreach $set in $data}
    {$set.url} {$set.width}w
    {if not isLast($set)},{/if}
  {/foreach}
{/template}
